--- Cristian Algorithm, featuring a simple 1-client, 1-server model
--- with round-trip time delayed message(s) to consider 
--- (i.e when ack has not been received within a timeout)

--- Introduces timer, where time will not increment when it expires (value is 0)
--- which is applicable on delaying the messages and imposing a timeout on client

load real-time-maude.maude

(tomod DELAY-MSGS is 
   protecting NAT-TIME-DOMAIN . 

   --- remains the same
  msg request : -> Msg .
  msg timeRequest : Time -> Msg .
  msg timeAck : Time Time -> Msg .

  --- but introduce a supersort called DelayMSg
  sort DelayMsg .
  subsorts Msg < DelayMsg < NEMsgConfiguration .

  --- with a constructor that decays to Msg when time is 0
  op delay : Msg Time -> DelayMsg [ctor right id: 0] .

endtom)


(tomod CRISTIAN-WITH-TIMEOUT is
  including DELAY-MSGS .
  protecting NAT-TIME-DOMAIN-WITH-INF .

  ops TIMEOUT MIN-DELAY : -> Time .

  class Client | LocalClock : Time, LocalTimer : TimeInf .
  class Server | LocalClock : Time .

  --- remains the same
  msg request : -> Msg .
  msg timeRequest : Time -> Msg .
  msg timeAck : Time Time -> Msg .

  var OID : Oid .    vars T T' S : Time .   var TI : TimeInf .
  
  --- Start usual protocol, but also set the timer:
  rl [rttRequest] :
     request  < OID : Client | LocalClock : T >  =>  < OID : Client | LocalTimer : TIMEOUT >  delay(timeRequest(T), MIN-DELAY) .

  --- Server read timeRequest and acknowledge like normal
  rl [rttAck] :
     timeRequest(T)  < OID : Server | LocalClock : S >  =>  < OID : Server | >  delay(timeAck(T, S), MIN-DELAY) .

  --- Client react to the ack within TIMEOUT. Set client's local time and turn off resendTimer:
  crl [rttAckReact] :
     timeAck(T, S)  < OID : Client | LocalClock : T' >  
      =>  < OID : Client | LocalClock : S plus ((T' monus T) div 2), LocalTimer : INF > 
      if (T' monus T) < TIMEOUT . 

  --- Client read and discard old ack (old being T' - T >= TIMEOUT):
  crl [discardOldRttAck] :
      timeAck(T, S)  < OID : Client | LocalClock : T' >  =>  < OID : Client | > 
      if (T' monus T) >= TIMEOUT .     
      
  --- Timer expires: send out a new timeRequest message, and reset the timer:
  rl [resendRequestAndResetTimer] :
     < OID : Client | LocalTimer : 0, LocalClock : T >  
      =>  < OID : Client | LocalTimer : TIMEOUT >  timeRequest(T) .
     
  --- Normal tick rule, but time cannot advance when Timer expires:
---   crl [tick] :
---      {< OID : Client | LocalClock : T, LocalTimer : TI > REST:Configuration} =>
---      {< OID : Client | LocalClock : T plus T', LocalTimer : TI monus T' > REST:Configuration}
---       in time T' 
---       if T' <= TI [nonexec] .

  --- Now, the tick rule must
  ---   increase all clocks (client and server)
  ---   decrease all timers (client and delayed messages)
  ---   must not advance time when client timer expires 
  crl [tick] : {C:Configuration}  =>  
               {delta(C:Configuration, T')} in time T'
               if T' <= mte(C:Configuration) [nonexec] . --- MTE used as bound for tick
   
  --- Delta models the effect of time elapse on a system
  op delta : Configuration Time -> Configuration [frozen (1)] .
  eq delta(none, T') = none .
  eq delta(NeC:NEConfiguration NeC':NEConfiguration, T') =
       delta(NeC:NEConfiguration, T') delta(NeC':NEConfiguration, T') .

  eq delta(< OID : Client | LocalClock : T, LocalTimer : TI > , T') =
        < OID : Client | LocalClock : T plus T', LocalTimer : TI monus T' > .

  eq delta(< OID : Server | LocalClock : T > , T') =
        < OID : Server | LocalClock : T plus T' >  .

  eq delta(M:Msg, T') = M:Msg .
  eq delta(delay(M:Msg, T), T') = delay(M:Msg, T monus T') .

  --- MTE (maximal time elapse) finds the "next" time some instantaneous rule must be applied
  op mte : Configuration -> TimeInf [frozen (1)] .
  eq mte(none) = INF .
  eq mte(NeC:NEConfiguration NeC':NEConfiguration) =
       min(mte(NeC:NEConfiguration), mte(NeC':NEConfiguration)) .

  eq mte(delay(M:Msg, T)) = INF .                     --- no stopping necessary (since delayed msg's
                                                      --- timer should "auto-decay" to msg at 0 due to identity)

  eq mte(< OID : Client | LocalTimer : TI >) = TI .   --- client will always have a timeout TI
  eq mte(< OID : Server | LocalClock : T >) = INF .   --- treat server with no timeout


endtom)


(tomod DISCRETE-CRISTIAN-WITH-TIMEOUT is 
   including CRISTIAN-WITH-TIMEOUT .

   eq TIMEOUT = 10 .
   eq MIN-DELAY = 2 .

   ops client server : -> Oid [ctor] .

   op initState : -> GlobalSystem .
   eq initState = {request
                  < client : Client | LocalClock : 0, LocalTimer : INF >  
                  < server : Server | LocalClock : 4 >} .
endtom)



(set tick def 1 .)      --- always advance time by increments of 1

--- Rewrite in time <= 2 (request and ack):
*** (tfrew initState in time <= 2 .)

--- We should be able to have a local clock = 5 where t > 2 and ack hasn't arrive:
*** (tsearch [1] initState =>* {< client : Client | LocalClock : 10, LocalTimer : 10 > REST:Configuration} in time < 11 .)
*** (tsearch [1] initState =>* {< client : Client | LocalClock : 5, LocalTimer : 5 > REST:Configuration} in time > 2 .)

--- But we shouldn't be able to have matching clock value at max(client, server) + (MIN-DELAY * 2), less than (MIN-DELAY * 2)
--- i.e. the round-trip messages affecting the client less than the minimum message delay on both way
*** (tsearch [1] initState =>* {< client : Client | LocalClock : 8 >  < server : Server | LocalClock : 8 >} in time < 4 .)

