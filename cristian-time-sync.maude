--- Cristian Algorithm, featuring a simple 1-client, 1-server model
--- with 1 round-trip time message to consider

load  real-time-maude.maude

(tomod CRISTIAN is

  class Client | LocalClock : Time .
  class Server | LocalClock : Time .

  --- Time used for division 
  op TWO : -> Time .

  msg request : -> Msg .
  msg timeRequest : Time -> Msg .
  msg timeAck : Time Time -> Msg .

  var OID : Oid .    vars T T' S : Time .
  
  --- Client start protocol by sending a timeRequest message with current clock value:
  rl [rttRequest] :
     request  < OID : Client | LocalClock : T >  =>  < OID : Client | >  timeRequest(T) .

  --- Server read timeRequest message & acknowledge with timeAck message:
  rl [rttAck] :
     timeRequest(T)  < OID : Server | LocalClock : S >  =>  < OID : Server | >  timeAck(T, S) .

  --- Client react to the ack, and deduce the round trip time for this round
  --- Set client's local time T_c = T_s + (RTT / 2)
  rl [rttAckReact] :
     timeAck(T, S)  < OID : Client | LocalClock : T' >  =>  < OID : Client | LocalClock : S plus ((T' monus T) div TWO) > .

  --- Tick rule, where time may elapse even if there are messages in the system:
  rl [tick] :
     {< OID : Client | LocalClock : T >  REST:Configuration}  =>
     {< OID : Client | LocalClock : T plus T' >  REST:Configuration} in time T' [nonexec] .

endtom)


--- Instantiates the object names and the time domain, and defines an initial state:

(tomod DISCRETE-CRISTIAN is
  including NAT-TIME-DOMAIN .
  including CRISTIAN .

  eq TWO = 2 .
  ops client server : -> Oid [ctor] .

  op initState : -> GlobalSystem .
  eq initState = {request 
                  < client : Client | LocalClock : 0 >  
                  < server : Server | LocalClock : 4 >} .
endtom)

--- (tomod DENSE-CRISTIAN is
---   including POSRAT-TIME-DOMAIN .
---   including CRISTIAN .

---   eq TWO = 2 .
---   ops client server : -> Oid [ctor] .

---   op initState : -> GlobalSystem .
---   eq initState = {request 
---                   < client : Client | LocalClock : 0 >  
---                   < server : Server | LocalClock : 4 >} .
--- endtom)

(set tick def 1 .)

--- Timed rewriting until time 3:
*** (tfrew initState in time <= 3 .)

--- Is it possible to reach a state where the local clock is 3, after receiving ack
*** (tsearch [1] initState =>* {< client : Client | LocalClock : 3 > < server : Server | >} in time < 12 .)

--- Is it possible to reach a state where the local clock is 4,
--- i.e., the sending of each message took zero time?
*** (tsearch [1] initState =>* {REST:Configuration < client : Client | LocalClock : 4 >} in time < 12 .)